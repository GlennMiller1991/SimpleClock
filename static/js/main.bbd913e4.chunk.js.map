{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","seconds","setSeconds","secondsStyle","transform","minutesStyle","hoursStyle","useEffect","intervalID","setInterval","clearInterval","className","style","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4LA4CeA,MAzCf,WAAe,MAGmBC,oBAAS,kBAAM,SAHlC,mBAGJC,EAHI,KAGKC,EAHL,KAMLC,EAAe,CACjBC,UAAU,UAAD,OAAsB,EAAVH,EAAZ,QAEPI,EAAe,CACjBD,UAAU,UAAD,OAAsB,GAAVH,EAAZ,QAEPK,EAAa,CACfF,UAAU,UAAD,OAAsB,YAAVH,EAAZ,QAUf,OAREM,qBAAU,WACN,IAAMC,EAAaC,aAAY,WAC3BP,GAAW,SAAAD,GAAO,OAAIA,EAAU,OACjC,IACH,OAAO,WACHS,cAAcF,MAEnB,IAED,qBAAKG,UAAU,QAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,wBACf,qBAAKA,UAAU,wBACf,qBAAKA,UAAU,0BACf,qBAAKA,UAAU,yBACf,sBAAKA,UAAU,mBAAf,UACI,6CAAe,uBAAf,mBAAoC,uBAApC,sBACF,qBAAKA,UAAU,iBAAiBC,MAAON,IACvC,qBAAKK,UAAU,gBAAgBC,MAAOP,IACtC,qBAAKM,UAAU,mBAAmBC,MAAOT,aCvBtCU,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.bbd913e4.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './App.css';\n\nfunction App() {\n\n    //initial state\n    const [seconds, setSeconds] = useState(() => 77726)\n\n    //dinamic styles\n    const secondsStyle = {\n        transform: `rotate(${seconds * 6}deg`\n    }\n    const minutesStyle = {\n        transform: `rotate(${seconds * 0.1}deg`\n    }\n    const hoursStyle = {\n        transform: `rotate(${seconds * 0.0083333333}deg`\n    }\n    useEffect(() => {\n        const intervalID = setInterval(() => {\n            setSeconds(seconds => seconds + 1)\n        }, 10)\n        return () => {\n            clearInterval(intervalID)\n        }\n    }, [])\n  return (\n      <div className=\"clock\">\n        <div className=\"outer-clock-face\">\n          <div className=\"marking marking-one\"></div>\n          <div className=\"marking marking-two\"></div>\n          <div className=\"marking marking-three\"></div>\n          <div className=\"marking marking-four\"></div>\n          <div className=\"inner-clock-face\">\n              <span>The Clock<br/>does not reflect<br/>the current time</span>\n            <div className=\"hand hour-hand\" style={hoursStyle}></div>\n            <div className=\"hand min-hand\" style={minutesStyle}></div>\n            <div className=\"hand second-hand\" style={secondsStyle}></div>\n          </div>\n        </div>\n      </div>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}